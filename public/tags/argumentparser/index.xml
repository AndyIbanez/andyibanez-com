<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ArgumentParser on Andy Ibanez</title>
    <link>https://www.andyibanez.com/tags/argumentparser/</link>
    <description>Recent content in ArgumentParser on Andy Ibanez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Apr 2020 07:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.andyibanez.com/tags/argumentparser/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing Command Line Tools in Swift Using ArgumentParser, Part 6: Releasing And Installing Our Command Line Tool</title>
      <link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part6/</link>
      <pubDate>Wed, 22 Apr 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part6/</guid>
      <description>I wasn&amp;rsquo;t sure if I should include this article as part of this series. But for the sake of completion, I decided to include it. This article is very short, but it tells us how to actually install our own tool in a system so we can start using it without writing its full path.
To recap, and before I end my series in Swift&amp;rsquo;s ArgumentParser, let&amp;rsquo;s give a quick overview of everything we have learned so far:</description>
    </item>
    
    <item>
      <title>Writing Command Line Tools in Swift Using ArgumentParser, Part 5: Tools with Asynchronous APIs</title>
      <link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part5/</link>
      <pubDate>Wed, 15 Apr 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part5/</guid>
      <description>In the past four weeks we have explored many of the features available to us via ArgumentParser and how to use them. Here&amp;rsquo;s a recap of everything we learned so far:
 We learned the very basics We learned how to validate user input We explored a way to separate our tool into subcommands. And finally, we learned how we can improve our documentation pages  In this article, we will not explore a feature exposed to us via ArgumentParser.</description>
    </item>
    
    <item>
      <title>Writing Command Line Tools in Swift Using ArgumentParser, Part 4: Customizing Help</title>
      <link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/</link>
      <pubDate>Wed, 08 Apr 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/</guid>
      <description>Writing Command Line Tools in Swift Using ArgumentParser, Part 4: Customizing Help
In the past few weeks, we have explored how to use ArgumentParser and many of its features. It&amp;rsquo;s great that ArgumentParser provides a lot of functionality for free, but it wouldn&amp;rsquo;t make sense to build great tools that users can&amp;rsquo;t figure out how to use. This week is all about that.
We saw how ArgumentParser can build a lot of documentation for free, but we can actually do more.</description>
    </item>
    
    <item>
      <title>Writing Command Line Tools in Swift Using ArgumentParser, Part 3: Subcommands</title>
      <link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/</link>
      <pubDate>Wed, 01 Apr 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/</guid>
      <description>We have been having a lot of fun with ArgumentParser in the last two weeks, and the fun is not about to end any time soon. We have explored how we can build basic commands with the basic building blocks of the framework, and how we can perform advanced validation and error handling. This week, we will something very useful: Subcommands.
Subcommands If you have used git directly from the command line before, you have used subcommands before.</description>
    </item>
    
    <item>
      <title>Writing Command Line Tools in Swift Using ArgumentParser, Part 2: Validation &amp; Errors</title>
      <link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/</link>
      <pubDate>Wed, 25 Mar 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/</guid>
      <description>Last week we explored how we can build a simple command line tool. We learned how to use @Argument, @Option, and @Flag as the building blocks for ArgumentParser command line tools. We we saw last week was enough to build many simple tools, but there&amp;rsquo;s still a lot to explore, and cool things to learn.
This week we will learn about input validation and errors, so we can build better tools that take more constrained parameters when relevant.</description>
    </item>
    
    <item>
      <title>Writing Command Line Tools in Swift Using ArgumentParser, Part 1: Introduction &amp; Basic Usage</title>
      <link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/</link>
      <pubDate>Wed, 18 Mar 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/</guid>
      <description>A few weeks ago, the Swift project introduced the ArgumentParser package. This package makes it easy to write command line tools by providing automatic parsing, documentation generation, and more.
In this article, we will explore ArgumentParser, and how we can start building some command line tools with it, using the basic building blocks, which are three Property Wrappers called Argument, Option, and Flag.
Project Configuration Open Xcode and create a new project of type &amp;ldquo;Command Line Tool&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>