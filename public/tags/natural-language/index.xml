<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>natural language on Andy Ibanez</title>
    <link>https://www.andyibanez.com/tags/natural-language/</link>
    <description>Recent content in natural language on Andy Ibanez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Mar 2020 07:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.andyibanez.com/tags/natural-language/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Finding Related Words with NLEmbedding</title>
      <link>https://www.andyibanez.com/posts/using-nlembeddings/</link>
      <pubDate>Wed, 04 Mar 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/using-nlembeddings/</guid>
      <description>There may be cases in which you need to find related words to others. With the NSLEmbedding class, you can find related strings based on the proximity of their vectors.
Using NLEmbedding Using NLEmbedding is very straight forward. A simple task is to get an array of related words, which come as an array of (String, NLDistance) back.
The distance between words tells you how &amp;ldquo;related&amp;rdquo; they are
let embedding = NLEmbedding.</description>
    </item>
    
    <item>
      <title>Analyzing Natural Language Text with NLTagger</title>
      <link>https://www.andyibanez.com/posts/analyzing-text-nltagger/</link>
      <pubDate>Wed, 26 Feb 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/analyzing-text-nltagger/</guid>
      <description>In the past few weeks, we have explored how we can tokenize natural language text and how to recognize the language a natural language text is written in. This week we will continue exploring more natural language APIs provided by the NaturalLanguage framework. We will learn about the NLTagger class, which allows us to to analyze natural language text to find parts of speech, lexical classes, lemma, scripts, and more. This API, introduced in iOS 12, implements machine learning to work, and just like the other NaturalLanguage classes, is very easy to use.</description>
    </item>
    
    <item>
      <title>Recognizing the language in a Natural Language Text with NLanguageRecognizer</title>
      <link>https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/</link>
      <pubDate>Wed, 19 Feb 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/</guid>
      <description>Continuing my trend of writing about language processing, today I want to discuss about identifying the language of a body of text. This is an interesting task we can do thanks, once again, to Apple&amp;rsquo;s investment in APIs linked to machine learning.
Today we will explore the NLLanguageRecognizer object. Introduced in iOS 12, this class can do a lot of language recognizing, from detecting the &amp;ldquo;dominant language&amp;rdquo; of a string, to all the possible languages.</description>
    </item>
    
    <item>
      <title>Tokenizing Natural Language into Semantic Units in iOS</title>
      <link>https://www.andyibanez.com/posts/tokenizing-nltokenizer/</link>
      <pubDate>Wed, 12 Feb 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/tokenizing-nltokenizer/</guid>
      <description>Working with Natural Language is possible thanks to machine learning. Starting on iOS 12, Apple has provided many APIs just for this task. In this article we will explore how to use NLTokenizer to separate natural language text into its proper units.
Introduction to Natural Language Tokenizing If you are not familiar with the inner workings of Natural Language processing, tokenizing simply means that we separate a string and analyze it to find its semantic units.</description>
    </item>
    
    <item>
      <title>Matching Natural Language Text for Predefined Data Patterns on Apple&#39;s Devices</title>
      <link>https://www.andyibanez.com/posts/matching-nl-nsdatadetector/</link>
      <pubDate>Wed, 05 Feb 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/matching-nl-nsdatadetector/</guid>
      <description>iOS has a lot of APIs that deal with natural language detection. One such class is NSDataDetector. This class allows you to match different kinds of data in text, including dates, time, links, and more. This class, actually introduced a very long time ago (in the iOS 4.0 days!) makes it very easy to find this kind of data in strings. In this article we will explore how to use this very old class - whose documentation is Objective-C only at this time - in Swift, and how to do common tasks with it.</description>
    </item>
    
  </channel>
</rss>