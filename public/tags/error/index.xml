<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>error on Andy Ibanez</title>
    <link>https://www.andyibanez.com/tags/error/</link>
    <description>Recent content in error on Andy Ibanez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jun 2020 22:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.andyibanez.com/tags/error/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding the Result Type in Swift</title>
      <link>https://www.andyibanez.com/posts/swift-result-type/</link>
      <pubDate>Wed, 11 Sep 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/swift-result-type/</guid>
      <description>Error handling when expecting a result out of an operation is a very common thing to do. For this reason, various high-level programming languages have introduced a Result type into their libraries, on top of their existing error-handling features. This feature was implemented in Swift 5.
A Result wraps a success or a failure. It is essentially an enum with two possible cases: .success and .failure. The .success case wraps the correct result of an operation, whereas a .</description>
    </item>
    
  </channel>
</rss>