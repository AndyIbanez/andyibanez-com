<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tvos on Andy Ibanez</title>
    <link>https://www.andyibanez.com/tags/tvos/</link>
    <description>Recent content in tvos on Andy Ibanez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Feb 2021 07:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.andyibanez.com/tags/tvos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Multithreading Options on Apple Platforms</title>
      <link>https://www.andyibanez.com/posts/multithreading-options-on-apple-platforms/</link>
      <pubDate>Wed, 24 Feb 2021 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/multithreading-options-on-apple-platforms/</guid>
      <description>We have reached the point in which computers are really fast. Especially Apple&amp;rsquo;s, as they have control of both the hardware and software, so, oftentimes, some tasks that could be sped up with multithreading, are not necessary anymore. But, for those cases when you do need multithreading, we have many options available.
On Apple&amp;rsquo;s platforms there is a surprising amount of concurrency tools. You are likely familiar with the most used one, the Grand Central Dispatch, DispatchQueue, which is pretty good and it covers the vast majority of use cases.</description>
    </item>
    
    <item>
      <title>Intercepting iOS Network Request Calls with Proxyman</title>
      <link>https://www.andyibanez.com/posts/intercepting-ios-network-request-calls-proxyman/</link>
      <pubDate>Wed, 10 Feb 2021 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/intercepting-ios-network-request-calls-proxyman/</guid>
      <description>Intercepting iOS Network Request Calls with Proxyman
Working with network APIs can be tricky, especially when debugging. You oftentimes have to ask yourself if your app is sending and receiving the expected information. You also often worry about whether the web service returns whatever it promises it will return. Working with APIs is both easy and tricky due to all the implications behind the scenes. What happens if the service goes down and sends unexpected responses?</description>
    </item>
    
    <item>
      <title>Quick Tip: Hosting JSON Files on Github for Free</title>
      <link>https://www.andyibanez.com/posts/quick-tip-hosting-json-files-github-for-free/</link>
      <pubDate>Wed, 04 Nov 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/quick-tip-hosting-json-files-github-for-free/</guid>
      <description>There are times in which you may want to host small JSON (or other small types of files) somewhere because your app needs them. Maybe you want to configure feature flags, or maybe you want to host IAP identifiers somewhere so as to not hardcode them in your app. This last case is something I did recently.
The immediate thought will be get a cheap server somewhere - after all, using something like Vultr you can get cheap hosting for as low as $2.</description>
    </item>
    
    <item>
      <title>Parsing Tricky JSON With Codable in Swift</title>
      <link>https://www.andyibanez.com/posts/parsing-tricky-json-codable-swift/</link>
      <pubDate>Wed, 28 Oct 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/parsing-tricky-json-codable-swift/</guid>
      <description>If you have been writing Swift in the past couple of years, you have probably been using Codable (which is really just the composition of Decodable and Encodable in the same protocol).
If you have been writing iOS apps for longer, you likely know about JSONSerialization as well, which is the backbone of Codable and it allows you to do more manual work when parsing JSON, seemingly giving you more control.</description>
    </item>
    
    <item>
      <title>Formatting Notes and Gotchas</title>
      <link>https://www.andyibanez.com/posts/formatting-notes-and-gotchas/</link>
      <pubDate>Wed, 30 Sep 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/formatting-notes-and-gotchas/</guid>
      <description>A year ago, we talked about using NSFormatter for formatting data in a human readable format. WWDC2020 brings some updates and changes to the NSFormatter APIs that we need to be aware of. This article will complement the NSFormatter article from last year with best practices and things to look out for.
Improvements for Combinations of Languages and Regions. NSFormatter always does its best to format the data according to the user&amp;rsquo;s language and region where relevant.</description>
    </item>
    
    <item>
      <title>A Short Guide to Localization on Apple Platforms</title>
      <link>https://www.andyibanez.com/posts/a-short-guide-localization-apple-platforms/</link>
      <pubDate>Wed, 23 Sep 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/a-short-guide-localization-apple-platforms/</guid>
      <description>Translating our apps in different languages helps us reach wider audiences of different cultures. This reach can increase our app usage considerably and offer more monetization properties.
In this short article we will mention the features Apples gives us to translate our apps to different languages, namely NSLocalizedString and and stringsdict files. You will also understand when you will want to use each, as they have different use cases and an app that takes localization seriously will use both.</description>
    </item>
    
    <item>
      <title>WWDC2020: What&#39;s new in CryptoKit</title>
      <link>https://www.andyibanez.com/posts/wwdc2020-whats-new-cryptokit/</link>
      <pubDate>Mon, 14 Sep 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/wwdc2020-whats-new-cryptokit/</guid>
      <description>CryptoKit, introduced in WWDC2019, allows us to perform cryptographic operations very easily.
While CryptoKit still doesn&amp;rsquo;t offer many algorithms and functionality, it&amp;rsquo;s still growing, and this year CryptoKit and do more.
HKDF Key derivation functions have been available from day one, but it wasn&amp;rsquo;t possible to derive keys independently. It was only possible to do so if you were using elliptic curve key agreement protocols.
To do this, there is a new HKDF object with static methods.</description>
    </item>
    
    <item>
      <title>Logging Messages With the Unified Logging System on Apple Platforms</title>
      <link>https://www.andyibanez.com/posts/logging-messages-unified-logging-system-apple-platforms/</link>
      <pubDate>Wed, 09 Sep 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/logging-messages-unified-logging-system-apple-platforms/</guid>
      <description>Last time we talked about the basics of the Unified Logging System, we set the basic concepts and code we need to write logs, along with the different logging levels, and more.
In this article we will talk about actually logging messages, how the framework is &amp;ldquo;smart enough&amp;rdquo; to strip out sensitive user info by default, and how we can control what gets stripped.
Logging Messages The framework supports interpolated strings right out of the box when you are using the new system in Swift.</description>
    </item>
    
    <item>
      <title>Using ASWebAuthenticationSession with SwiftUI</title>
      <link>https://www.andyibanez.com/posts/using-aswebauthenticationaession-swiftui/</link>
      <pubDate>Wed, 02 Sep 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/using-aswebauthenticationaession-swiftui/</guid>
      <description>Working with REST APIs you have no control over can be a little monotonous. This is especially for OAuth 2.0 API that need you to do a little bit of setup, get your API keys with the service provider, and then you need to do the setup on your app&amp;rsquo;s size: Configure your URL scheme, deal with that URL Scheme, and write code that does something when your app gets called with that URL.</description>
    </item>
    
    <item>
      <title>Introduction to Apple&#39;s Unified Logging System on iOS 14 in Swift</title>
      <link>https://www.andyibanez.com/posts/introduction-apples-unified-logging-system-ios14-swift/</link>
      <pubDate>Wed, 26 Aug 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/introduction-apples-unified-logging-system-ios14-swift/</guid>
      <description>It is no surprise that software tend to write logs to a local file as they execute. As events, errors, or exceptional situations occur, a lot of software takes note of them using a local logging solution. This is done because these practices can allow us to troubleshoot problems for our users, find bugs, and in general understand the behavior of our software in untested or lesser tested scenarios.
When comes to iOS and other Apple platforms, there have always been third party dependencies that allow you to do this.</description>
    </item>
    
    <item>
      <title>A File Download Queue in Combine for Swift</title>
      <link>https://www.andyibanez.com/posts/file-download-queue-combine/</link>
      <pubDate>Wed, 12 Aug 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/file-download-queue-combine/</guid>
      <description>Combine allows us to create pipelines for a lot of tasks. Thanks to the fact it can do work concurrently without leveraging callbacks, it is very easy to build things that would otherwise be very complex.
In this short article, we will build a file download queue that downloads images sequentially. You can use this as the base for more complex queues.
The queue will download an array of images sequentially.</description>
    </item>
    
    <item>
      <title>Adding Custom SwiftUI Views and Modifiers to the Xcode Library</title>
      <link>https://www.andyibanez.com/posts/custom-views-modifiers-xcode-library-swiftui/</link>
      <pubDate>Wed, 29 Jul 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/custom-views-modifiers-xcode-library-swiftui/</guid>
      <description>Xcode 12 introduces the ability for developers to add their own SwiftUI views and modifiers to the Xcode library. This allows people using your code to discover your custom views, makes your codebase easier to learn, and it allows you to visually edit complex views visually rather than with code.
In this short article we will explore how we can add our own views and modifiers to the Xcode library.</description>
    </item>
    
    <item>
      <title>Wrapping Asynchronous APIs into Combine Futures</title>
      <link>https://www.andyibanez.com/posts/wrapping-asynchronous-apis-into-combine-futures/</link>
      <pubDate>Wed, 22 Jul 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/wrapping-asynchronous-apis-into-combine-futures/</guid>
      <description>Two of the concepts used a lot in Reactive Programming are the Future and Promises. Whether you have been using Combine for a while or are new to Reactive Programming, chances are you have seen these two words. These terms date to years ago. And I would be lying if I told you I knew what that they were for until I started learning Combine. The first time I heard about Futures and Promises was back in my NodeJS job half a decade ago, and I didn&amp;rsquo;t understand these concepts back then.</description>
    </item>
    
    <item>
      <title>Sharing Data Across Apple Devices with the MultipeerConnectivity Framework</title>
      <link>https://www.andyibanez.com/posts/sharing-data-apple-devices-multipeerconnectivity-framework/</link>
      <pubDate>Wed, 15 Jul 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/sharing-data-apple-devices-multipeerconnectivity-framework/</guid>
      <description>There are times when we may want to share data across instances of our app running on different physical devices. You could develop a server or even leverage cloud storage, but did you know Apple provides a framework to share data directly across devices, without having to use an intermediary? This framework is the MultipeerConnectivity framework, and it has actually been around for a while. In this article, we will explore this framework to understand how we can use it to share data across instances of our app in different devices directly.</description>
    </item>
    
    <item>
      <title>Error Protocol Specializations in Swift</title>
      <link>https://www.andyibanez.com/posts/error-protocol-specializations-swift/</link>
      <pubDate>Thu, 18 Jun 2020 22:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/error-protocol-specializations-swift/</guid>
      <description>Earlier this week I was scrolling through my Twitter feed as usual and I found this tweet that made me realize I may have been handling errors incorrectly in Swift all my life. This prompted me to research a bit more about error handling in Swift, and it turns out there&amp;rsquo;s many specialized Error protocols you can conform to, and you should probably be using them over the default Error provided by the language.</description>
    </item>
    
    <item>
      <title>Using the iOS Keychain in Swift</title>
      <link>https://www.andyibanez.com/posts/using-ios-keychain-swift/</link>
      <pubDate>Wed, 27 May 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/using-ios-keychain-swift/</guid>
      <description>This article is an entirely rewritten version of an old tutorial I wrote years ago titled &amp;ldquo;Using the iOS Keychain&amp;rdquo;. Originally written in Objective-C, the old version has been archived but it is accessible here.
The Keychain is the place where you would store sensitive data. As secure as iOS currently is, the keychain is the right place to store passwords, authentication tokens, and other sensitive data. You should not store this kind of data in UserDefaults, even if iOS has made it harder to access that data for normal users in the latest versions.</description>
    </item>
    
    <item>
      <title>Dependency Injection with Storyboards on Apple Platforms</title>
      <link>https://www.andyibanez.com/posts/dependency-injection-storyboards/</link>
      <pubDate>Wed, 13 May 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/dependency-injection-storyboards/</guid>
      <description>Every iOS developer has written a line of code like this one at least once:
class DollInfoViewController: UIViewController { var dollModel: Doll? override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } } Or in the worst case, you may have seen code like this:
var dollModel: Doll! Then, when you want to create a view controller of that type you&amp;rsquo;d do:
// First we need to check if we can actually instantiate the view controller.</description>
    </item>
    
    <item>
      <title>Finding Related Words with NLEmbedding</title>
      <link>https://www.andyibanez.com/posts/using-nlembeddings/</link>
      <pubDate>Wed, 04 Mar 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/using-nlembeddings/</guid>
      <description>There may be cases in which you need to find related words to others. With the NSLEmbedding class, you can find related strings based on the proximity of their vectors.
Using NLEmbedding Using NLEmbedding is very straight forward. A simple task is to get an array of related words, which come as an array of (String, NLDistance) back.
The distance between words tells you how &amp;ldquo;related&amp;rdquo; they are
let embedding = NLEmbedding.</description>
    </item>
    
    <item>
      <title>Analyzing Natural Language Text with NLTagger</title>
      <link>https://www.andyibanez.com/posts/analyzing-text-nltagger/</link>
      <pubDate>Wed, 26 Feb 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/analyzing-text-nltagger/</guid>
      <description>In the past few weeks, we have explored how we can tokenize natural language text and how to recognize the language a natural language text is written in. This week we will continue exploring more natural language APIs provided by the NaturalLanguage framework. We will learn about the NLTagger class, which allows us to to analyze natural language text to find parts of speech, lexical classes, lemma, scripts, and more. This API, introduced in iOS 12, implements machine learning to work, and just like the other NaturalLanguage classes, is very easy to use.</description>
    </item>
    
    <item>
      <title>Recognizing the language in a Natural Language Text with NLanguageRecognizer</title>
      <link>https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/</link>
      <pubDate>Wed, 19 Feb 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/</guid>
      <description>Continuing my trend of writing about language processing, today I want to discuss about identifying the language of a body of text. This is an interesting task we can do thanks, once again, to Apple&amp;rsquo;s investment in APIs linked to machine learning.
Today we will explore the NLLanguageRecognizer object. Introduced in iOS 12, this class can do a lot of language recognizing, from detecting the &amp;ldquo;dominant language&amp;rdquo; of a string, to all the possible languages.</description>
    </item>
    
    <item>
      <title>Tokenizing Natural Language into Semantic Units in iOS</title>
      <link>https://www.andyibanez.com/posts/tokenizing-nltokenizer/</link>
      <pubDate>Wed, 12 Feb 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/tokenizing-nltokenizer/</guid>
      <description>Working with Natural Language is possible thanks to machine learning. Starting on iOS 12, Apple has provided many APIs just for this task. In this article we will explore how to use NLTokenizer to separate natural language text into its proper units.
Introduction to Natural Language Tokenizing If you are not familiar with the inner workings of Natural Language processing, tokenizing simply means that we separate a string and analyze it to find its semantic units.</description>
    </item>
    
    <item>
      <title>Matching Natural Language Text for Predefined Data Patterns on Apple&#39;s Devices</title>
      <link>https://www.andyibanez.com/posts/matching-nl-nsdatadetector/</link>
      <pubDate>Wed, 05 Feb 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/matching-nl-nsdatadetector/</guid>
      <description>iOS has a lot of APIs that deal with natural language detection. One such class is NSDataDetector. This class allows you to match different kinds of data in text, including dates, time, links, and more. This class, actually introduced a very long time ago (in the iOS 4.0 days!) makes it very easy to find this kind of data in strings. In this article we will explore how to use this very old class - whose documentation is Objective-C only at this time - in Swift, and how to do common tasks with it.</description>
    </item>
    
    <item>
      <title>CryptoKit and the Secure Enclave</title>
      <link>https://www.andyibanez.com/posts/cryptokit-secure-enclave/</link>
      <pubDate>Wed, 15 Jan 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/cryptokit-secure-enclave/</guid>
      <description>CryptoKit and the Secure Enclave
Apple&amp;rsquo;s CryptoKit introduced this year is full of amazing features. Not only does it offer very easy to use cryptography, but it also offers an interface to a security feature that Apple introduced less than a decade ago: The Secure Enclave.
The Secure Enclave is a hardware feature for helping the system work with cryptographically secure data. In this article, we will build upon our previous CryptoKit knowledge (see the article linked above), and we will also learn what the Secure Enclave is all about.</description>
    </item>
    
    <item>
      <title>Modern Backgrounds Tasks in iOS 13</title>
      <link>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</link>
      <pubDate>Wed, 25 Dec 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</guid>
      <description>In the article from last week, we explored the basic background execution APIs introduced since iOS 7. We explored how we could request additional time for a task to complete after entering the background, how we could defer downloads with URLSession, and how we could use silent push notifications to trigger background tasks.
The story with background tasks does not end there. iOS 13 introduced more APIs to do better background tasks, and that allow you to do things that weren&amp;rsquo;t possible before.</description>
    </item>
    
    <item>
      <title>Formatting Relative Dates With RelativeDateTimeFormatter</title>
      <link>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</link>
      <pubDate>Wed, 11 Dec 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</guid>
      <description>Formatting Relative Dates With RelativeDateTimeFormatter
A few weeks ago we talked about formatting content with NSFormatter, an abstract class from which multiple formatting classes inherit from to allow you to format different kinds of data in a human-readable form. NSFormatter is not only a class you can inherit from yourself, but as iOS evolves, more formatters will be added to its family. This week, we will explore a new member of this family introduced in iOS 13: RelativeDateTimeFormatter.</description>
    </item>
    
    <item>
      <title>UserDefaults and Property Wrappers</title>
      <link>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</link>
      <pubDate>Wed, 04 Dec 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</guid>
      <description>Soon after I published this article, Christian Tietze wrote a fair criticism of this idea here.
Once you understand how property wrappers work, you can use this article to apply it to user defaults. The main idea is that property wrappers allow you to store your values differently and even externally. That said, you may or may not want to implement this in a real app. I recommend you read this article first, and then go back to Christian&amp;rsquo;s to see more downsides of this idea other than the ones I mentioned below.</description>
    </item>
    
    <item>
      <title>Intercepting Network Traffic with mitmproxy</title>
      <link>https://www.andyibanez.com/posts/intercepting-network-mitmproxy/</link>
      <pubDate>Wed, 20 Nov 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/intercepting-network-mitmproxy/</guid>
      <description>If you have been programming mobile apps for a while, you must have used a web based API - JSON based or otherwise - and you have had to deal with bugs related to your requests and responses to a web service. You have likely asked yourself why some parsing code is not working as expected, or why a request seems to have an invalid format. Intercepting your own network calls with a proxy can help you find the answer to these questions.</description>
    </item>
    
    <item>
      <title>When CryptoKit is not Enough</title>
      <link>https://www.andyibanez.com/posts/cryptokit-not-enough/</link>
      <pubDate>Wed, 06 Nov 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/cryptokit-not-enough/</guid>
      <description>This article is a continuation to my Common Cryptographic Operations with CryptoKit article. If you want to learn how to use CryptoKit, read that one instead, and come to this one when you need a feature not offered by it.
As I have been playing with the amazing CryptoKit framework in the past few weeks, I have discovered a few more things that CryptoKit currently doesn&amp;rsquo;t do. This is not generally a bad thing, and I think these limitations are related to what seem to be the goal of the framework:</description>
    </item>
    
    <item>
      <title>Introduction to Patterns and Pattern Matching in Swift.</title>
      <link>https://www.andyibanez.com/posts/pattern-matching/</link>
      <pubDate>Wed, 30 Oct 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/pattern-matching/</guid>
      <description>Swift is a beautiful language, but it hides some powerful features from developers who come from more &amp;ldquo;old-style&amp;rdquo; programming languages such as C++ and Java. One such feature is Pattern Matching, and it allows you to write some cleaner code when dealing with some operations.
For example, consider casting. Casting is a feature in the vast majority of statically-typed languages. Casting is considered to be an ugly operation by some, because when you need to cast, it&amp;rsquo;s usually because the language has a flaw that prevents it from telling you about the right data type underneath.</description>
    </item>
    
    <item>
      <title>Understanding and Implementing NSNotificationCenter on Apple&#39;s Platforms</title>
      <link>https://www.andyibanez.com/posts/nsnotificationcenter/</link>
      <pubDate>Wed, 23 Oct 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/nsnotificationcenter/</guid>
      <description>Sometimes when you are writing an app, you need to be notified of events occurring somewhere else in the system - either in your own app, or in the operating system - and react to them accordingly. For example, you may be an app like Snapchat and you want to know when a screenshot has been taken. This is a system notification that you can &amp;ldquo;listen&amp;rdquo; to in order to react.</description>
    </item>
    
    <item>
      <title>Filtering Arrays with Predicates</title>
      <link>https://www.andyibanez.com/posts/filtering-arrays-nspredicate/</link>
      <pubDate>Wed, 16 Oct 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/filtering-arrays-nspredicate/</guid>
      <description>Whether you have been programming for a while or are new at it, chances are you have had the need to search for results in an array. And while Apple&amp;rsquo;s SDKs for iOS, macOS, iPadOS, and watchOS all use Foundation and have a set of handy tools to make that task easier, there is one particular API that is very powerful but doesn&amp;rsquo;t get much use unless you pair with other frameworks such as Core Data: NSPredicate.</description>
    </item>
    
    <item>
      <title>Common Cryptographic Operations With CryptoKit</title>
      <link>https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/</link>
      <pubDate>Wed, 09 Oct 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/</guid>
      <description>Apple has always taken security very seriously, so it&amp;rsquo;s expected that they would provide developers with the same tools they have to help developers implement the same security measures in their apps. This year, Apple introduced CryptoKit.
Apple providing new cryptography tools is nothing new. They have provided the Security framework for a very long time, and a few years later they introduced CommonCrypto. The problem with these frameworks is that they can be very low level, being written in C, and it can be intimidating for new developers to adopt them in their project.</description>
    </item>
    
    <item>
      <title>Formatting Content with NSFormatter</title>
      <link>https://www.andyibanez.com/posts/nsformatter/</link>
      <pubDate>Wed, 25 Sep 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/nsformatter/</guid>
      <description>Very often, we need to deal with data in a &amp;ldquo;raw&amp;rdquo; format that, if displayed directly to the user, it makes little sense to them. This kind of data includes a date timestamp, the number of bytes in a big file, or numbers with no rounding a bunch of decimals. There is a lot of data like this, and we need to be able to format it and show it to the user.</description>
    </item>
    
    <item>
      <title>Understanding the Result Type in Swift</title>
      <link>https://www.andyibanez.com/posts/swift-result-type/</link>
      <pubDate>Wed, 11 Sep 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/swift-result-type/</guid>
      <description>Error handling when expecting a result out of an operation is a very common thing to do. For this reason, various high-level programming languages have introduced a Result type into their libraries, on top of their existing error-handling features. This feature was implemented in Swift 5.
A Result wraps a success or a failure. It is essentially an enum with two possible cases: .success and .failure. The .success case wraps the correct result of an operation, whereas a .</description>
    </item>
    
    <item>
      <title>Building URLs With NSURLComponents</title>
      <link>https://www.andyibanez.com/posts/building-urls-with-nsurlcomponents/</link>
      <pubDate>Wed, 04 Sep 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/building-urls-with-nsurlcomponents/</guid>
      <description>If you have been programming for Apple platforms for a while, chances are you have seen (or maybe even wrote yourself) a line of code that looks like this:
let url = URL(string: &amp;#34;https://www.google.com/search?hl=en&amp;amp;q=pullip&amp;#34;)! Whether you wrote it yourself or someone else did it, one thing is clear: This is not a safe way to build URLs. Can you know, for sure, that your URL is actually valid? Intuitively, all of us can see a URL and see if it&amp;rsquo;s valid, but there is a whole lot of governing in the URL format that at some point we may find funny URLs that look valid and aren&amp;rsquo;t, or the other way around; they look invalid, but aren&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>Caching Content With NSCache</title>
      <link>https://www.andyibanez.com/posts/caching-content-with-nscache/</link>
      <pubDate>Wed, 28 Aug 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/caching-content-with-nscache/</guid>
      <description>When we are working with apps on iOS, iPadOS, macOS, watchOS, or TVOS, it&amp;rsquo;s possible that at some point we will have to store and retrieve a lot of temporary data throughout the lifecycle of our software. Depending on our needs, we may need to cache data on disk and manually manage it ourselves, or we may only need it to cache it in memory. In the case of the latter, Apple offers NSCache, a mutable collection that lets us cache files in memory using key-value pairs.</description>
    </item>
    
    <item>
      <title>Exploring the NSOperation APIs for Apple&#39;s Platforms</title>
      <link>https://www.andyibanez.com/posts/exploring-the-nsoperation-apis/</link>
      <pubDate>Wed, 21 Aug 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/exploring-the-nsoperation-apis/</guid>
      <description>The original title for this article was posted on my old website in 2012 and it was titled &amp;ldquo;Multithreading on iOS And Mac OS X Using NSOperations&amp;rdquo;. The original examples were written in Objective-C. This article has been rewritten from scratch not only to give the examples in Swift, but also to improve the quality of the old article. It has been shortened, and both language and tone have been revised.</description>
    </item>
    
  </channel>
</rss>