<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nil on Andy Ibanez</title>
    <link>https://www.andyibanez.com/tags/nil/</link>
    <description>Recent content in nil on Andy Ibanez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Feb 2021 07:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.andyibanez.com/tags/nil/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>nil-null-mess in Objective-C and Swift</title>
      <link>https://www.andyibanez.com/posts/nil-null-mess-objective-c-and-swift/</link>
      <pubDate>Wed, 03 Feb 2021 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/nil-null-mess-objective-c-and-swift/</guid>
      <description>All programmers are familiar with the concept of nullability. Whether something exists or not. Whether something is there or not.
Objective-C is very dynamic when it comes to dealing with nullability. All Objective-C programmers are familiar with this phrase:
 messages can be sent to nil.
 Which means that nil itself can call methods, safely enough, without crashing.
In Swift, we have a bit more safety. We can send &amp;ldquo;messages&amp;rdquo; to nil, but only if they are the result of a chained optional.</description>
    </item>
    
  </channel>
</rss>