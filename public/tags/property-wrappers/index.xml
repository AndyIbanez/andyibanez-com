<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>property wrappers on Andy Ibanez</title>
    <link>https://www.andyibanez.com/tags/property-wrappers/</link>
    <description>Recent content in property wrappers on Andy Ibanez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Dec 2019 07:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.andyibanez.com/tags/property-wrappers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UserDefaults and Property Wrappers</title>
      <link>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</link>
      <pubDate>Wed, 04 Dec 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</guid>
      <description>Soon after I published this article, Christian Tietze wrote a fair criticism of this idea here.
Once you understand how property wrappers work, you can use this article to apply it to user defaults. The main idea is that property wrappers allow you to store your values differently and even externally. That said, you may or may not want to implement this in a real app. I recommend you read this article first, and then go back to Christian&amp;rsquo;s to see more downsides of this idea other than the ones I mentioned below.</description>
    </item>
    
    <item>
      <title>Understanding Property Wrappers in Swift</title>
      <link>https://www.andyibanez.com/posts/understanding-property-wrappers-swift/</link>
      <pubDate>Wed, 27 Nov 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/understanding-property-wrappers-swift/</guid>
      <description>Swift 5.1 introduced a sleuth of wonderful features, and amongst them, there&amp;rsquo;s one that is essential for SwiftUI: Property Wrappers. Property wrappers are a powerful feature in Swift that allow you to wrap behavior along with properties. This allows us to do some interesting things. If you have seen SwiftUI, you&amp;rsquo;ve seen the @State &amp;ldquo;keyword&amp;rdquo;, and you know that it allows you to modify structs. This is possible thanks to the behavior &amp;ldquo;wrapped&amp;rdquo; within properties marked with it.</description>
    </item>
    
  </channel>
</rss>