<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS13 on Andy Ibanez</title>
    <link>https://www.andyibanez.com/tags/ios13/</link>
    <description>Recent content in iOS13 on Andy Ibanez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jan 2020 07:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.andyibanez.com/tags/ios13/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Recognizing Speech Locally on an iOS Device Using the Speech Framework</title>
      <link>https://www.andyibanez.com/posts/speech-recognition-sfspeechrecognizer/</link>
      <pubDate>Wed, 29 Jan 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/speech-recognition-sfspeechrecognizer/</guid>
      <description>As iOS becomes more advanced, features that we thought belonged to the long future start becoming more common place in today&amp;rsquo;s software. One such feature is speech recognition, which allows a device to take verbal input from a user, transcribe it into text, and do something with it.
In iOS, we can do this using a framework called Speech, and an object called SFSpeechRecognizer. With this class, you can perform all kinds of speech recognition tasks.</description>
    </item>
    
    <item>
      <title>Implementing Parametrizable Shortcut Actions for your iOS Apps</title>
      <link>https://www.andyibanez.com/posts/parametrized-shortcuts/</link>
      <pubDate>Wed, 08 Jan 2020 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/parametrized-shortcuts/</guid>
      <description>All the way back to 2016, a group of very talented iOS developers released Workflow, a very popular app to let users create actions of different kinds within the system&amp;rsquo;s constraints. You could create and automate different tasks, such as controlling a server via SSH, downloading all the images from a website, and more&amp;hellip; Much, much more.
Apple saw the power of the app and acquired it in March 2017. This was very exciting, but we didn&amp;rsquo;t hear anything from the app since.</description>
    </item>
    
    <item>
      <title>Modern Backgrounds Tasks in iOS 13</title>
      <link>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</link>
      <pubDate>Wed, 25 Dec 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</guid>
      <description>In the article from last week, we explored the basic background execution APIs introduced since iOS 7. We explored how we could request additional time for a task to complete after entering the background, how we could defer downloads with URLSession, and how we could use silent push notifications to trigger background tasks.
The story with background tasks does not end there. iOS 13 introduced more APIs to do better background tasks, and that allow you to do things that weren&amp;rsquo;t possible before.</description>
    </item>
    
    <item>
      <title>Formatting Relative Dates With RelativeDateTimeFormatter</title>
      <link>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</link>
      <pubDate>Wed, 11 Dec 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</guid>
      <description>Formatting Relative Dates With RelativeDateTimeFormatter
A few weeks ago we talked about formatting content with NSFormatter, an abstract class from which multiple formatting classes inherit from to allow you to format different kinds of data in a human-readable form. NSFormatter is not only a class you can inherit from yourself, but as iOS evolves, more formatters will be added to its family. This week, we will explore a new member of this family introduced in iOS 13: RelativeDateTimeFormatter.</description>
    </item>
    
    <item>
      <title>Playing Custom Haptics on iOS</title>
      <link>https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/</link>
      <pubDate>Wed, 02 Oct 2019 07:00:00 -0400</pubDate>
      
      <guid>https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/</guid>
      <description>Vibration and physical feedback has become an important feature of Apple&amp;rsquo;s operating systems. Starting with the Apple Watch, Apple replaced the traditional vibration feedback with haptic feedback hardware, which allowed them to have more control over how vibrations and physical feedback work.
First being introduced in the Apple Watch, Haptic Feedback has been a core part of the Apple ecosystem experience since. Just think about it, wouldn&amp;rsquo;t it be weird if you force-touched the screen to do something, and there was no physical response from the device?</description>
    </item>
    
  </channel>
</rss>